{"version":3,"file":"strip-json-comments.js","sources":["../node_modules/strip-json-comments/index.js"],"sourcesContent":["'use strict';\nconst singleComment = Symbol('singleComment');\nconst multiComment = Symbol('multiComment');\nconst stripWithoutWhitespace = () => '';\nconst stripWithWhitespace = (string, start, end) => string.slice(start, end).replace(/\\S/g, ' ');\n\nconst isEscaped = (jsonString, quotePosition) => {\n\tlet index = quotePosition - 1;\n\tlet backslashCount = 0;\n\n\twhile (jsonString[index] === '\\\\') {\n\t\tindex -= 1;\n\t\tbackslashCount += 1;\n\t}\n\n\treturn Boolean(backslashCount % 2);\n};\n\nmodule.exports = (jsonString, options = {}) => {\n\tconst strip = options.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;\n\n\tlet insideString = false;\n\tlet insideComment = false;\n\tlet offset = 0;\n\tlet result = '';\n\n\tfor (let i = 0; i < jsonString.length; i++) {\n\t\tconst currentCharacter = jsonString[i];\n\t\tconst nextCharacter = jsonString[i + 1];\n\n\t\tif (!insideComment && currentCharacter === '\"') {\n\t\t\tconst escaped = isEscaped(jsonString, i);\n\t\t\tif (!escaped) {\n\t\t\t\tinsideString = !insideString;\n\t\t\t}\n\t\t}\n\n\t\tif (insideString) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!insideComment && currentCharacter + nextCharacter === '//') {\n\t\t\tresult += jsonString.slice(offset, i);\n\t\t\toffset = i;\n\t\t\tinsideComment = singleComment;\n\t\t\ti++;\n\t\t} else if (insideComment === singleComment && currentCharacter + nextCharacter === '\\r\\n') {\n\t\t\ti++;\n\t\t\tinsideComment = false;\n\t\t\tresult += strip(jsonString, offset, i);\n\t\t\toffset = i;\n\t\t\tcontinue;\n\t\t} else if (insideComment === singleComment && currentCharacter === '\\n') {\n\t\t\tinsideComment = false;\n\t\t\tresult += strip(jsonString, offset, i);\n\t\t\toffset = i;\n\t\t} else if (!insideComment && currentCharacter + nextCharacter === '/*') {\n\t\t\tresult += jsonString.slice(offset, i);\n\t\t\toffset = i;\n\t\t\tinsideComment = multiComment;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t} else if (insideComment === multiComment && currentCharacter + nextCharacter === '*/') {\n\t\t\ti++;\n\t\t\tinsideComment = false;\n\t\t\tresult += strip(jsonString, offset, i + 1);\n\t\t\toffset = i + 1;\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\treturn result + (insideComment ? strip(jsonString.slice(offset)) : jsonString.slice(offset));\n};\n"],"names":["singleComment","Symbol","multiComment","stripWithoutWhitespace","stripWithWhitespace","string","start","end","slice","replace","isEscaped","jsonString","quotePosition","index","backslashCount","Boolean","options","strip","whitespace","insideString","insideComment","offset","result","i","length","currentCharacter","nextCharacter"],"mappings":"AACA,MAAMA,EAAgBC,OAAO,iBACvBC,EAAeD,OAAO,gBACtBE,EAAyB,IAAM,GAC/BC,EAAsB,CAACC,EAAQC,EAAOC,IAAQF,EAAOG,MAAMF,EAAOC,GAAKE,QAAQ,MAAO,KAEtFC,EAAY,CAACC,EAAYC,KAC9B,IAAIC,EAAQD,EAAgB,EACxBE,EAAiB,EAErB,KAA6B,OAAtBH,EAAWE,IACjBA,GAAS,EACTC,GAAkB,EAGnB,OAAOC,QAAQD,EAAiB,kBAGhB,CAACH,EAAYK,EAAU,MACvC,MAAMC,GAA+B,IAAvBD,EAAQE,WAAuBf,EAAyBC,EAEtE,IAAIe,GAAe,EACfC,GAAgB,EAChBC,EAAS,EACTC,EAAS,GAEb,IAAK,IAAIC,EAAI,EAAGA,EAAIZ,EAAWa,OAAQD,IAAK,CAC3C,MAAME,EAAmBd,EAAWY,GAC9BG,EAAgBf,EAAWY,EAAI,GAErC,IAAKH,GAAsC,MAArBK,EAA0B,CAC/Bf,EAAUC,EAAYY,KAErCJ,GAAgBA,GAIlB,IAAIA,EAIJ,GAAKC,GAAiBK,EAAmBC,IAAkB,KAKpD,CAAA,GAAIN,IAAkBpB,GAAiByB,EAAmBC,IAAkB,OAAQ,CAC1FH,IACAH,GAAgB,EAChBE,GAAUL,EAAMN,EAAYU,EAAQE,GACpCF,EAASE,EACT,SACM,GAAIH,IAAkBpB,GAAsC,OAArByB,EAC7CL,GAAgB,EAChBE,GAAUL,EAAMN,EAAYU,EAAQE,GACpCF,EAASE,MACH,CAAA,IAAKH,GAAiBK,EAAmBC,IAAkB,KAAM,CACvEJ,GAAUX,EAAWH,MAAMa,EAAQE,GACnCF,EAASE,EACTH,EAAgBlB,EAChBqB,IACA,SACM,GAAIH,IAAkBlB,GAAgBuB,EAAmBC,IAAkB,KAAM,CACvFH,IACAH,GAAgB,EAChBE,GAAUL,EAAMN,EAAYU,EAAQE,EAAI,GACxCF,EAASE,EAAI,EACb,gBAzBAD,GAAUX,EAAWH,MAAMa,EAAQE,GACnCF,EAASE,EACTH,EAAgBpB,EAChBuB,IA0BF,OAAOD,GAAUF,EAAgBH,EAAMN,EAAWH,MAAMa,IAAWV,EAAWH,MAAMa"}